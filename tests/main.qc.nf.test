nextflow_pipeline {

	def ONLY_IN_INPUT = 78;

    name "Pipeline Tests for Quality Control"
    script "main.nf"

    test("Should run QC-only") {

        when {
            params {
                project  = "test-job"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                mode = "qc-only"
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }   
        }

        then {
            assert workflow.success

            assert !file("${outputDir}/chr_20.zip").exists()
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text,
                file("${outputDir}/statistics/snps-typed-only.txt").text,
                file("${outputDir}/statistics/snps-excluded.txt").text
            ).match()
       
        }

    }

    test("Should run QC-only including VCF 4.3 and indels") {

        when {
            params {
                project  = "test-job"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/with_indels/*.vcf.gz"
                allele_frequency_population = "eur"
                mode = "qc-only"
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
            }   
        }

        then {
            assert workflow.success
        }

    }

    test("Should fail QC-only but publish files") {

        when {
            params {
                project  = "test-job"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                mode = "qc-only"
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene_with_qcfilters.yaml"
                output = "${outputDir}"
            }   
        }

        then {
            assert workflow.failed

            assert file("${outputDir}/statistics/snps-typed-only.txt").exists()
            
            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()
       
        }

    }

    test("Should run QC-only without population") {

        when {
            params {
                project  = "test-job"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                mode = "qc-only"
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }   
        }

        then {
            assert workflow.success

            assert !file("${outputDir}/chr_20.zip").exists()
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text,
                file("${outputDir}/statistics/snps-typed-only.txt").text,
                file("${outputDir}/statistics/snps-excluded.txt").text
            ).match()
       
        }

    }

    test("Should write typed only sites") {

        when {
            params {
                project  = "testWriteTypedSitesOnly"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-unphased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                mode = "qc-only"
                phasing = [
                    engine: "eagle"                
                ]
                imputation = [
                    min_r2: 0.5                
                ]                      
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text,
                file("${outputDir}/statistics/snps-typed-only.txt").text,
            ).match()
            
            // file starts with #, which is ignored by Tablesaw (also not used as header)
            with(path("${outputDir}/statistics/snps-typed-only.txt").csv(header: true)) {
                assert rowCount == ONLY_IN_INPUT
            }
  
        }

    }    
    
}
