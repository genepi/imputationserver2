nextflow_pipeline {

    def PASSWORD = "LHX:VO{_72o"
	def TOTAL_REFPANEL_CHR20_B37 = 63402;
	def TOTAL_REFPANEL_CHR20_B38 = 63384;
	def TOTAL_REFPANEL_CHRX_B37 = 1479509;
	def TOTAL_REFPANEL_CHRX_B38 = 1077575;    
	def ONLY_IN_INPUT = 78;
	def TOTAL_SNPS_INPUT = 7824;
	def SNPS_MONOMORPHIC = 11;

    name "Pipeline Tests for Imputation"
    script "main.nf"
    
    test("Should run with phased data") {

        when {
            params {
                project  = "testPipelineWithPhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()
           
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }
            
            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }
            
            with(zip.extract("chr20.info.gz").vcf) {
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }

        }

    }


    test("Should run with phased data and meta option") {

        when {
            params {
                project  = "testPipelineWithPhasedAndMetaOption"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                imputation = [
                    meta: true           
                ]
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()
           
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert getChromosome() == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }
            
            with(zip.extract("chr20.empiricalDose.vcf.gz").vcf) {
                assert variantCount == 7735
            }

            with(zip.extract("chr20.info.gz").vcf) {
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }


        }

    }


    test("Should fail with phased data and empty phasing option") {

        when {
            params {
                project  = "testPipelineWithPhasedAndEmptyPhasing"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: ""                
                ]
            }
        }

        then {
            assert workflow.failed
        }

    }
    

    test("Should run with phased data and no phasing selected") {

        when {
            params {
                project  = "testPipelineWithPhasedAndNoPhasingSelected"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }

            with(zip.extract("chr20.info.gz").vcf) {
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }

        }

    }    


    test("Should run with eagle") {

        when {
            params {
                project  = "testPipelineWithEagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "eagle"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37
            }

            with(zip.extract("chr20.info.gz").vcf) {
                assert variantCount == TOTAL_REFPANEL_CHR20_B37
            }         

        }

    }


    test("Should run with eagle and without encryption and compression") {

        when {
            params {
                project  = "testPipelineWithEagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "eagle"                
                ]
                encryption = [
                    enabled: false
                ]  
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()

            assert !file("${outputDir}/chr_20.zip").exists()

            with(path("${outputDir}/chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37
            }

            with(path("${outputDir}/chr20.info.gz").vcf) {
                assert variantCount == TOTAL_REFPANEL_CHR20_B37
            }

        }

    }


    test("Should run with beagle") {

        when {
            params {
                project  = "testPipelineWithBeagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "beagle"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 

            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37
            }

            with(zip.extract("chr20.info.gz").vcf) {
                assert variantCount == TOTAL_REFPANEL_CHR20_B37
            }

        }

    }


    test("Should run without phasing and validate header") {

        when {
            params {
                project  = "testValidatePanelWithEagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")
            
            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert header.getOtherHeaderLine("mis_phasing").getValue() == params.phasing.engine
                assert header.getOtherHeaderLine("mis_pipeline").getKey()
                assert header.getOtherHeaderLine("mis_panel").getKey()
            }

        }

    }


    test("Should run with eagle and r2 filter") {

        when {
            params {
                project  = "testPipelineWithEagleAndR2Filter"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
                imputation = [
                    min_r2: 0.5                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }
            
            def file = zip.extract("chr20.dose.vcf.gz").vcf
            with(file) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount < TOTAL_REFPANEL_CHR20_B37
            }

            with(zip.extract("chr20.info.gz").vcf) {
                assert variantCount == file.variantCount
            }       
          
        }

    }


    test("Should fail with unphased and empty phasing") {

        when {
            params {
                project  = "testPipelineWithEmptyPhasing"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-unphased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
                imputation = [
                    min_r2: 0.5                
                ]                  
            }
        }

        then {
            assert workflow.failed
        }

    }


    test("Should run with phased data from hg19 to hg38") {

        when {
            params {
                project  = "testPipelineWithPhasedHg19ToHg38"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "chr20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B38 + ONLY_IN_INPUT                
            }
          
        }

    }


    test("Should run with eagle from hg19 to hg38") {

        when {
            params {
                project  = "testPipelineWithEagleHg19ToHg38"
                files = "$projectDir/tests/data/input/chr20-unphased/*vcf.gz"
                allele_frequency_population = "eur"
                build = "hg19"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "eagle"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "chr20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B38                
            }
          
        }

    }


    test("Should run with eagle from hg38 to hg38") {

        when {
            params {
                project  = "testPipelineWithEagleHg38ToHg38"
                build = "hg38"
                files = "$projectDir/tests/data/input/chr20-unphased-hg38/*vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "eagle"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "chr20"
                assert sampleCount == 51
                assert phased
                assert TOTAL_REFPANEL_CHR20_B38 == variantCount                
            }
          
        }

    }
    

    test("Should run without phasing from hg38 to hg19") {

        when {
            params {
                project  = "testPipelineWithPhasedHg38ToHg19"
                build = "hg38"
                files = "$projectDir/tests/data/input/chr20-phased-hg38/*vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT               
            }
          
        }

    }


    test("Should run with eagle from hg38 to hg19") {

        when {
            params {
                project  = "testPipelineWithEagleHg38ToHg19"
                build = "hg38"
                files = "$projectDir/tests/data/input/chr20-unphased-hg38/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "eagle"                
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert chromosome == "20"
                assert sampleCount == 51;
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHR20_B37                
            }
          
        }

    }


    test("Should run with phased chrX data") {

        when {
            params {
                project  = "testChrXPipelinePhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrX-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def zip = zip("${outputDir}/chr_X.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chrX.dose.vcf.gz").vcf) {
                assert chromosome == "X"
                assert sampleCount == 26
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHRX_B37                
            }
          
        }

    }


    test("Should impute chrX and correctly impute one SNP") {

        when {
            params {
                project  = "testChrXLeaveOneOutPipelinePhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrX-phased-loo/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def zip = zip("${outputDir}/chr_X.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            def dosage = zip.extract("chrX.dose.vcf.gz")

            with(dosage.vcf) {
                assert chromosome == "X"
                assert sampleCount == 26;
                assert phased
                assert TOTAL_REFPANEL_CHRX_B37 == variantCount                
            }

            // SNP 26963697 excluded from input and imputed! true genotypes:
     		// 1,1|1,1|1,1|1,1,1|1,1,1|1,1|1,1,0,1|1,1|0,1,1,1,1,1,1|1,1,1|1,1|1,1|1,1|1,1|1,1|0,
            with(getVcfLine(dosage,26963697)) {
                assert getHetCount() == 2
                assert getHomRefCount() == 1
                assert getHomVarCount() == 23          
            }
          
        }

    }


    test("Should run with phased chrX data and hg38") {

        when {
            params {
                project  = "testChrXPipelineWithPhasedHg38"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrX-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {
            assert workflow.success

            def zip = zip("${outputDir}/chr_X.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chrX.dose.vcf.gz").vcf) {
                assert chromosome == "chrX"
                assert sampleCount == 26;
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHRX_B38                
            }

        }

    }


    test("Should run with phased chr23 data and hg38") {

        when {
            params {
                project  = "testChr23PipelinePhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr23-phased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {

            assert workflow.success

            def zip = zip("${outputDir}/chr_X.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chrX.dose.vcf.gz").vcf) {
                assert chromosome == "chrX"
                assert sampleCount == 26
                assert phased
                assert variantCount == TOTAL_REFPANEL_CHRX_B38                
            }
          
        }

    }    


    test("Should run with chrMT") {

        when {
            params {
                project  = "testChrMTPipeline"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrMT/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/phylotree-chrMT/cloudgene.yaml"
                output = "${outputDir}"
                phasing = [
                    engine: "no_phasing"                
                ]
            }
        }

        then {

            assert workflow.success

            def zip = zip("${outputDir}/chr_MT.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chrMT.dose.vcf.gz").vcf) {
                assert chromosome == "MT"
                assert sampleCount == 5435
                assert phased
            }

        }

    }    

}
