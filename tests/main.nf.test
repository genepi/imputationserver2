@Grab(group='net.lingala.zip4j', module='zip4j', version='2.11.5')

import net.lingala.zip4j.ZipFile

nextflow_pipeline {

    def PASSWORD = "test-password"
	def TOTAL_REFPANEL_CHR20_B37 = 63402;
	def TOTAL_REFPANEL_CHR20_B38 = 63384;
	def TOTAL_REFPANEL_CHRX_B37 = 1479509;
	def TOTAL_REFPANEL_CHRX_B38 = 1077575;    
	def ONLY_IN_INPUT = 78;
	def TOTAL_SNPS_INPUT = 7824;
	def SNPS_MONOMORPHIC = 11;

    name "Test Workflow main.nf"
    script "main.nf"

    test("Should run QC-only") {

        when {
            params {
                project  = "test-job"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                mode = "qc-only"
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }   
        }

        then {
            assert workflow.success

            assert !file("${outputDir}/chr_20.zip").exists()
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def log = file("${outputDir}/cloudgene.report.json")
            with(log) {
                assert exists()
                assert text.contains("Remaining sites in total: 7,735")     
            }
            
            assert snapshot(
                log.text,
                file("${outputDir}/statistics/typed-only.txt").text,
                file("${outputDir}/statistics/snps-excluded.txt").text
            ).match()
       
        }

    }
    
    test("Should run with phased data") {

        when {
            params {
                project  = "testPipelineWithPhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success

            with(file("${outputDir}/cloudgene.report.json")) {
                assert exists()
                assert text.contains("Remaining sites in total: 7,735")     
            }
           
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }
            
            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert getChromosome() == "20"
                assert getNoSamples() == 51;
                assert isPhased()
                assert getNoSnps() == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }
            
            with(zip.extract("chr20.info.gz").csv(decompress: true, sep: "\t")) {
                assert rowCount == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
                assert columnCount == 13
                assert "Rsq" in columns
            }
        }

    }

    test("Should run with phased data and meta option") {

        when {
            params {
                project  = "testPipelineWithPhasedAndMetaOption"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
                meta = true
            }
        }

        then {
            assert workflow.success

            with(file("${outputDir}/cloudgene.report.json")) {
                assert exists()
                assert text.contains("Remaining sites in total: 7,735")     
            }
           
            assert !file("${outputDir}/chr20.dose.vcf.gz").exists()

            def zip = zip("${outputDir}/chr_20.zip").password(PASSWORD) 
            with(zip) {
                assert isValid()
                assert isEncrypted()            
            }

            with(zip.extract("chr20.dose.vcf.gz").vcf) {
                assert getChromosome() == "20"
                assert getNoSamples() == 51;
                assert isPhased()
                assert getNoSnps() == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }
            
            with(zip.extract("chr20.empiricalDose.vcf.gz").vcf) {
                assert getNoSnps() == 7735
            }

            with(zip.extract("chr20.info.gz")) {
                assert linesGzip.size() == 1 + TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            }
        }

    }

    test("Should fail with phased data and empty phasing option") {

        when {
            params {
                project  = "testPipelineWithPhasedAndEmptyPhasing"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = ""
            }
        }

        then {
            assert workflow.failed
        }

    }
    
    // this testcould be deleted later, since now phasing must be actively deactivated
    test("Should run with phased data and no phasing selected") {

        when {
            params {
                project  = "testPipelineWithPhasedAndNoPhasingSelected"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");
            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51;
            assert file.isPhased()
            assert file.getNoSnps() == TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT
            
            //check correct number of snps in info.gz file
            assert path("${outputDir}/chr20.info.gz").linesGzip.size() == 1 + TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT

        }

    }    

    test("Should run with eagle") {

        when {
            params {
                project  = "testPipelineWithEagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                phasing = "no_phasing"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "eagle"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51;
            assert file.isPhased()
            assert file.getNoSnps() == TOTAL_REFPANEL_CHR20_B37

            //check correct number of snps in info.gz file
            assert path("${outputDir}/chr20.info.gz").linesGzip.size() == 1 + TOTAL_REFPANEL_CHR20_B37

        }

    }

        test("Should run with eagle and without encryption and compression") {

        when {
            params {
                project  = "testPipelineWithEagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                phasing = "no_phasing"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "eagle"
                encryption = [
                    enabled: false
                ]  
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/cloudgene.report.json")
            with(log) {
                assert exists()
                assert text.contains("Remaining sites in total: 7,735")
            }
            assert snapshot(log.text).match()

            assert !file("${outputDir}/chr_20.zip").exists()

            with(path("${outputDir}/chr20.dose.vcf.gz").vcf) {
                assert getChromosome() == "20"
                assert getNoSamples() == 51;
                assert isPhased()
                assert getNoSnps() == TOTAL_REFPANEL_CHR20_B37
            }
            
            with(path("${outputDir}/chr20.info.gz")) {
                assert linesGzip.size() == 1 + TOTAL_REFPANEL_CHR20_B37
            }

        }

    }

    test("Should run with beagle") {

        when {
            params {
                project  = "testPipelineWithBeagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                phasing = "no_phasing"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "beagle"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51;
            assert file.isPhased()
            assert file.getNoSnps() == TOTAL_REFPANEL_CHR20_B37
            //check correct number of snps in info.gz file
            assert path("${outputDir}/chr20.info.gz").linesGzip.size() == 1 + TOTAL_REFPANEL_CHR20_B37

        }

    }

    test("Should run with eagle and validate header") {

        when {
            params {
                project  = "testValidatePanelWithEagle"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                phasing = "no_phasing"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def header = path("${outputDir}/chr20.dose.vcf.gz").vcfHeader
       
            assert header.getOtherHeaderLine("mis_phasing").getValue() == params.phasing
            assert header.getOtherHeaderLine("mis_pipeline").getKey()
            assert header.getOtherHeaderLine("mis_panel").getKey()
        }

    }

    test("Should run with eagle and r2 filter") {

        when {
            params {
                project  = "testPipelineWithEagleAndR2Filter"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*.vcf.gz"
                population = "eur"
                phasing = "no_phasing"
                password = PASSWORD
                r2Filter = 0.5
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51
            assert file.isPhased()

            def lines = path("${outputDir}/chr20.info.gz").linesGzip.size() - 1
            assert file.getNoSnps() == lines

            assert TOTAL_REFPANEL_CHR20_B37 > file.getNoSnps()
          
        }

    }

    test("Should not run with unphased and empty phasing") {

        when {
            params {
                project  = "testPipelineWithEmptyPhasing"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-unphased/*.vcf.gz"
                population = "eur"
                phasing = "no_phasing"
                password = PASSWORD
                r2Filter = 0.5
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }
        }

        then {
            assert workflow.failed
        }

    }

    test("Should write typed only sites") {

        when {
            params {
                project  = "testWriteTypedSitesOnly"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-unphased/*.vcf.gz"
                population = "eur"
                phasing = "eagle"
                password = PASSWORD
                r2Filter = 0.5
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def typed_only = file("${outputDir}/statistics/typed-only.txt");
            assert typed_only.exists()
            assert typed_only.readLines().size() == ONLY_IN_INPUT + 1


        }

    }

    test("Should run with phased data from hg19 to hg38") {

        when {
            params {
                project  = "testPipelineWithPhasedHg19ToHg38"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr20-phased/*vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHR20_B38 + ONLY_IN_INPUT == file.getNoSnps()
          
        }

    }

    test("Should run with eagle from hg19 to hg38") {

        when {
            params {
                project  = "testPipelineWithEagleHg19ToHg38"
                files = "$projectDir/tests/data/input/chr20-unphased/*vcf.gz"
                population = "eur"
                build = "hg19"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "eagle"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHR20_B38 == file.getNoSnps()
          
        }

    }

    test("Should run with eagle from hg38 to hg38") {

        when {
            params {
                project  = "testPipelineWithEagleHg38ToHg38"
                build = "hg38"
                files = "$projectDir/tests/data/input/chr20-unphased-hg38/*vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "eagle"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHR20_B38 == file.getNoSnps()
          
        }

    }
    
    test("Should run without phasing from hg38 to hg19") {

        when {
            params {
                project  = "testPipelineWithPhasedHg38ToHg19"
                build = "hg38"
                files = "$projectDir/tests/data/input/chr20-phased-hg38/*vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHR20_B37 + ONLY_IN_INPUT == file.getNoSnps()
          
        }

    }

    test("Should run with eagle from hg38 to hg19") {

        when {
            params {
                project  = "testPipelineWithEagleHg38ToHg19"
                build = "hg38"
                files = "$projectDir/tests/data/input/chr20-unphased-hg38/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "eagle"
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def imputed_chr_20 = file("${outputDir}/chr_20.zip");
            assert imputed_chr_20.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_20, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chr20.dose.vcf.gz").vcf
            assert file.getChromosome() == "20"
            assert file.getNoSamples() == 51
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHR20_B37 == file.getNoSnps()
          
        }

    }

    test("Should run with phased chrX data") {

        when {
            params {
                project  = "testChrXPipelinePhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrX-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success

            def imputed_chr_X = file("${outputDir}/chr_X.zip");
            assert imputed_chr_X.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_X, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chrX.dose.vcf.gz").vcf
            assert file.getChromosome() == "X"
            assert file.getNoSamples() == 26
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHRX_B37 == file.getNoSnps()
          
        }

    }

    test("Should impute chrX and correctly impute one SNP") {

        when {
            params {
                project  = "testChrXLeaveOneOutPipelinePhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrX-phased-loo/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success

            def imputed_chr_X = file("${outputDir}/chr_X.zip");
            assert imputed_chr_X.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_X, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chrX.dose.vcf.gz").vcf
            assert file.getChromosome() == "X"
            assert file.getNoSamples() == 26
            assert file.isPhased()
            assert TOTAL_REFPANEL_CHRX_B37 == file.getNoSnps()

            // SNP 26963697 excluded from input and imputed! true genotypes:
     		// 1,1|1,1|1,1|1,1,1|1,1,1|1,1|1,1,0,1|1,1|0,1,1,1,1,1,1|1,1,1|1,1|1,1|1,1|1,1|1,1|0,
            def line = getVcfLine(path("${outputDir}/chrX.dose.vcf.gz"), 26963697)
            assert line.getHetCount() == 2
            assert line.getHomRefCount() == 1
            assert line.getHomVarCount() == 23
          
        }

    }

    test("Should run with phased chrX data and hg38") {

        when {
            params {
                project  = "testChrXPipelineWithPhasedHg38"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrX-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
           /* assert workflow.success

            def imputed_chr_X = file("${outputDir}/chr_X.zip");
            assert imputed_chr_X.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_X, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chrX.dose.vcf.gz").vcf
            assert file.getChromosome() == "X"
            assert file.getNoSamples() == 26
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHRX_B38 == file.getNoSnps()*/
          
        }

    }

    test("Should run with phased chr23 data and hg38") {

        when {
            params {
                project  = "testChr23PipelinePhased"
                build = "hg19"
                files = "$projectDir/tests/data/input/chr23-phased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/hapmap-chrX-hg38/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            /*assert workflow.success

            def imputed_chr_X = file("${outputDir}/chr_X.zip");
            assert imputed_chr_X.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_X, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chrX.dose.vcf.gz").vcf
            assert file.getChromosome() == "X"
            assert file.getNoSamples() == 26
            assert file.isPhased()

            assert TOTAL_REFPANEL_CHRX_B38 == file.getNoSnps()*/
          
        }

    }    

    test("Should run with chrMT") {

        when {
            params {
                project  = "testChrMTPipeline"
                build = "hg19"
                files = "$projectDir/tests/data/input/chrMT/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "$projectDir/tests/data/refpanels/phylotree-chrMT/cloudgene.yaml"
                output = "${outputDir}"
                phasing = "no_phasing"
            }
        }

        then {
            assert workflow.success
            def imputed_chr_MT = file("${outputDir}/chr_MT.zip");
            assert imputed_chr_MT.exists()
            ZipFile zipFile = new ZipFile(imputed_chr_MT, PASSWORD.toCharArray());
            zipFile.extractAll("${outputDir}");

            def file = path("${outputDir}/chrMT.dose.vcf.gz").vcf
            assert file.getChromosome() == "MT"
            assert file.getNoSamples() == 5435
            assert file.isPhased()
          
        }

    }    

    test("Should run with pgs calculation") {

        when {
            params {
                project = "test-job"
                build = "hg19"
                files = "${projectDir}/tests/data/input/chr20-unphased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "${projectDir}/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"

                pgs = [
                    enabled: true,
                    min_r2: 0,
                    fix_strand_flips: false                    
                ]

                encryption = [
                    enabled: false
                ]

                pgscatalog = [
                    scores: "${projectDir}/tests/data/input/pgs/test-scores.chr20.txt.gz",
                    meta: "${projectDir}/tests/data/input/pgs/test-scores.chr20.json"
                ]
            }
        }

        then {
            assert workflow.success

            //TODO: check which expected file is correct!
            def expected = csv("tests/data/input/chr20-unphased/scores.expected.txt")
            def actual = csv("${outputDir}/scores.txt")
            assertTableEquals actual, expected
        }
    }

    test("Should run with pgs calculatio and category filter") {

        when {
            params {
                project = "test-job"
                build = "hg19"
                files = "${projectDir}/tests/data/input/chr20-unphased/*.vcf.gz"
                population = "eur"
                password = PASSWORD
                refpanel_yaml = "${projectDir}/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"

                pgs = [
                    enabled: true,
                    min_r2: 0,
                    fix_strand_flips: false,
                    category: "Body measurement"              
                ]

                encryption = [
                    enabled: false
                ]

                pgscatalog = [
                    scores: "${projectDir}/tests/data/input/pgs/test-scores.chr20.txt.gz",
                    meta: "${projectDir}/tests/data/input/pgs/test-scores.chr20.json"
                ]
            }
        }

        then {
            assert workflow.success

            def quality_control_log = file("${outputDir}/cloudgene.report.json")
            assert quality_control_log.exists()
            assert quality_control_log.text.contains("Remaining sites in total: 7,735")

            def expected = csv("tests/data/input/chr20-unphased/scores.expected.txt")
            
            def actual = csv("${outputDir}/scores.txt")
            with(actual){
                assert columnNames == ["sample", "PGS000027"]
                assert columns["sample"] == expected.columns["sample"]
                assertArrayEquals columns["PGS000027"], expected.columns["PGS000027"]
            } 

        }
    }


}
