nextflow_pipeline {

    name "Pipeline Tests for PGS"
    script "main.nf"  

    test("Should run with pgs calculation") {

        when {
            params {
                project = "test-job"
                build = "hg19"
                files = "${projectDir}/tests/data/input/chr20-unphased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "${projectDir}/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"

                pgs = [
                    enabled: true,
                    min_r2: 0,
                    fix_strand_flips: false                    
                ]

                encryption = [
                    enabled: false
                ]

                pgscatalog = [
                    scores: "${projectDir}/tests/data/input/pgs/test-scores.chr20.txt.gz",
                    meta: "${projectDir}/tests/data/input/pgs/test-scores.chr20.json"
                ]
            }
        }

        then {
            assert workflow.success

            //TODO: check which expected file is correct! (m3vcf vs msav)
            //def expected = csv("tests/data/input/chr20-unphased/scores.expected.txt")
            def expected = csv("tests/data/input/pgs/expected.txt")
            def actual = csv("${outputDir}/scores.txt")
            assertTableEquals actual, expected
        }

    }


    test("Should run with pgs calculation and category filter") {

        when {
            params {
                project = "test-job"
                build = "hg19"
                files = "${projectDir}/tests/data/input/chr20-unphased/*.vcf.gz"
                allele_frequency_population = "eur"
                password = PASSWORD
                refpanel_yaml = "${projectDir}/tests/data/refpanels/hapmap2/cloudgene.yaml"
                output = "${outputDir}"

                pgs = [
                    enabled: true,
                    min_r2: 0,
                    fix_strand_flips: false,
                    category: "Body measurement"              
                ]

                encryption = [
                    enabled: false
                ]

                pgscatalog = [
                    scores: "${projectDir}/tests/data/input/pgs/test-scores.chr20.txt.gz",
                    meta: "${projectDir}/tests/data/input/pgs/test-scores.chr20.json"
                ]
            }
        }

        then {
            assert workflow.success

            def log = file("${outputDir}/qc_report.txt")

            assert snapshot(
                log.text
            ).match()

            //TODO: check which expected file is correct! (m3vcf vs msav)
            //def expected = csv("tests/data/input/chr20-unphased/scores.expected.txt")
            def expected = csv("tests/data/input/pgs/expected.txt")
            
            def actual = csv("${outputDir}/scores.txt")
            with(actual){
                assert columnNames == ["sample", "PGS000027"]
                assert columns["sample"] == expected.columns["sample"]
                assertArrayEquals columns["PGS000027"], expected.columns["PGS000027"]
            } 

        }

    }

}
